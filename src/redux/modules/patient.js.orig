import { createAction, handleActions } from 'redux-actions';

// ------------------------------------
// Constants
// ------------------------------------
export const CREATE_PATIENT = 'CREATE_PATIENT';
export const FETCH_PATIENT = 'FETCH_PATIENT';
export const SET_QUESTIONNAIRE_RESPONSES = 'SET_QUESTIONNAIRE_RESPONSES';
export const REMOVE_QUESTIONNAIRE_RESPONSES = 'REMOVE_QUESTIONNAIRE_RESPONSES';
export const SET_QUESTIONNAIRE_DETAIL_VIEW_ID = 'SET_QUESTIONNAIRE_DETAIL_VIEW_ID';
<<<<<<< HEAD
export const SET_RT_DETAIL_VIEW_ID = 'SET_RT_DETAIL_VIEW_ID';
=======
export const SET_NEW_PATIENT_RESPONSES = 'SET_NEW_PATIENT_RESPONSES';
export const REMOVE_NEW_PATIENT_RESPONSES = 'REMOVE_NEW_PATIENT_RESPONSES';
export const UPDATE_BACKGROUND_HISTORY = 'UPDATE_BACKGROUND_HISTORY';
export const SAVE_BACKGROUND_HISTORY = 'SAVE_BACKGROUND_HISTORY';

export const BACKGROUND_HISTORY_CHANGE_ALLERGIES = 'BACKGROUND_HISTORY_CHANGE_ALLERGIES';
>>>>>>> Initial revision of background history screen.

// ------------------------------------
// Actions
// ------------------------------------
export const createPatient = createAction(
  CREATE_PATIENT,
  (patientName) => {
    return {patientName};
  }
);

export const fetchPatient = createAction(
  FETCH_PATIENT,
  (patientId) => {
    return {patientId};
  }
);

export const setQuestionnaireResponses = createAction(
  SET_QUESTIONNAIRE_RESPONSES,
  (questionnaireResponseData) => {
    return {questionnaireResponseData};
  }
);

export const removeQuestionnaireResponses = createAction(
  REMOVE_QUESTIONNAIRE_RESPONSES
);

export const setQuestionnaireDetailViewId = createAction(
  SET_QUESTIONNAIRE_DETAIL_VIEW_ID,
  (questionnaireId) => {
    return {questionnaireId};
  }
);

<<<<<<< HEAD
export const setRTDetailViewId = createAction(
  SET_RT_DETAIL_VIEW_ID,
  (rtId) => {
    return {rtId};
=======
export const setNewPatientResponses = createAction(
  SET_NEW_PATIENT_RESPONSES,
  (newPatientResponseData) => {
    return {newPatientResponseData};
  }
);

export const removeNewPatientResponses = createAction(
  REMOVE_NEW_PATIENT_RESPONSES
);

export const updateBackgroundHistory = createAction(
  UPDATE_BACKGROUND_HISTORY,
  (diabetes, diabetesControl, hypertension, hypercholesterolemia, background) => {
    return {
      diabetes: diabetes,
      diabetesControl: diabetesControl,
      hypertension: hypertension,
      hypercholesterolemia: hypercholesterolemia,
      background: background,
    };
  }
);

export const saveBackgroundHistory = createAction(
  SAVE_BACKGROUND_HISTORY
);

export const backgroundHistoryChangeAllergies = createAction(
  BACKGROUND_HISTORY_CHANGE_ALLERGIES,
  (allergies) => {
    return {allergies: allergies};
>>>>>>> Initial revision of background history screen.
  }
);

export const actions = {
  createPatient,
  fetchPatient,
  setQuestionnaireResponses,
  removeQuestionnaireResponses,
  setQuestionnaireDetailViewId,
<<<<<<< HEAD
  setRTDetailViewId
=======
  setNewPatientResponses,
  removeNewPatientResponses,
  updateBackgroundHistory,
  saveBackgroundHistory,
  backgroundHistoryChangeAllergies,
>>>>>>> Initial revision of background history screen.
};

// ------------------------------------
// Reducer
// ------------------------------------
export default handleActions({
  [CREATE_PATIENT]: (state, action) => {
    return [
      ...state,
      { name: action.payload.patientName }
    ];
  },
  [FETCH_PATIENT]: (state, action) => {
    let patient = {};
    patient = {
      activePatient: state.searchResults.filter((p) => {
        if (p.id === parseInt(action.payload.patientId, 10)) {
          return p;
        }
      })[0],
      searchResults: state.searchResults
    };
    patient.activePatient['backgroundHistory'] = {
      diabetes: false,
      diabetesControl: null,
      hypertension: false,
      hypercholesterolemia: false,
      background: '',
      allergies: false,
      saved: false,
    };
    return patient;
  },
  [SET_QUESTIONNAIRE_RESPONSES]: (state, action) => {
    return {
      activePatient: {
        ...state.activePatient,
        questionnaireResponses: action.payload.questionnaireResponseData
      },
      searchResults: state.searchResults
    };
  },
  [REMOVE_QUESTIONNAIRE_RESPONSES]: (state, action) => {
    const newState = {
      activePatient: state.activePatient,
      searchResults: state.searchResults
    };

    delete newState.activePatient.questionnaireResponses;
    delete newState.activePatient.questionnaireDetailViewId;

    return newState;
  },
  [SET_QUESTIONNAIRE_DETAIL_VIEW_ID]: (state, action) => {
    return {
      activePatient: {
        ...state.activePatient,
        questionnaireDetailViewId: action.payload.questionnaireId
      },
      searchResults: state.searchResults
    };
  },
<<<<<<< HEAD
  [SET_RT_DETAIL_VIEW_ID]: (state, action) => {
    return {
      activePatient: {
        ...state.activePatient,
        RTDetailViewId: action.payload.rtId
      },
      searchResults: state.searchResults
    };
=======
  [SET_NEW_PATIENT_RESPONSES]: (state, action) => {
    return {
      activePatient: {
        ...state.activePatient,
        newPatientResponses: action.payload.newPatientResponseData
      },
      searchResults: state.searchResults
    };
  },
  [REMOVE_NEW_PATIENT_RESPONSES]: (state, action) => {
    const newState = {
      activePatient: state.activePatient,
      searchResults: state.searchResults
    };

    delete newState.activePatient.newPatientResponses;

    return newState;
  },
  [UPDATE_BACKGROUND_HISTORY]: (state, actions) => {
    const currentBackgroundHistory = state.activePatient.backgroundHistory;
    const payload = actions.payload;
    let backgroundHistory = {
      diabetes: payload.diabetes,
      diabetesControl: payload.diabetesControl,
      hypertension: payload.hypertension,
      hypercholesterolemia: payload.hypercholesterolemia,
      background: payload.background,
      allergies: payload.allergies,
      saved: currentBackgroundHistory.saved,
    };

    return {
      ...state,
      activePatient: {
        ...state.activePatient,
        backgroundHistory: backgroundHistory
      }
    };
  },
  [SAVE_BACKGROUND_HISTORY]: (state, actions) => {
    return {
      ...state,
      activePatient: {
        ...state.activePatient,
        backgroundHistory: {
          ...state.activePatient.backgroundHistory,
          saved: true
        }
      }
    };
  },
  [BACKGROUND_HISTORY_CHANGE_ALLERGIES]: (state, actions) => {
    return {
      ...state,
      activePatient: {
        ...state.activePatient,
        backgroundHistory: {
          ...state.activePatient.backgroundHistory,
          allergies: actions.payload.allergies
        }
      }
    };
>>>>>>> Initial revision of background history screen.
  }
}, 1);
